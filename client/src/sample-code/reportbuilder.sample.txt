//reportbuilder.sample.txt
//import the emebed sdk
import { LookerEmbedSDK, LookerEmbedDashboard } from '@looker/embed-sdk'

//initialize the embed sdk, only needs to be done once
LookerEmbedSDK.init('demo.looker.com', '/auth')

//call helper method when page loads to create dashboard and setup events
componentDidMount() {
    this.embedSdkInit()
}

//create dashboard using embed sdk method
embedSdkInit() {
    LookerEmbedSDK.createExploreWithId('thelook_adwords::events')
        .appendTo('#embedContainer')
        .withClassName('iframe')
        .build()
        .connect()
        .then(this.setupExplore)
        .catch((error) => {
            console.error('Connection error', error)
        })
}

//apply dashboard to state so it's accessible for events later
//e.g. this.filtersUpdate()
setupExplore = (explore) => {
    this.setState({
        explore: explore
    })
}

//render embedContainer on the page so the dashboard can be appeneded
render() {
    return (
            <div id="embedContainer" className="col-sm-12 w-100">
    )
}


//client side code
componentDidMount() {
    this.fetchFolderContents();
}

async fetchFolderContents() {
    let lookerResposnse = await fetch('/fetchfolder/1827', {
        method: 'GET',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
        }
    })

    let lookerResposnseData = await lookerResposnse.json();
    this.setState({
        folder_contents: lookerResposnseData.folder
    });
}

//server side code
const { LookerNodeSDK } = require('@looker/sdk')

module.exports.fetchFolder = async (req, res, next) => {
    const { params } = req
    const sdk = LookerNodeSDK.createClient() //valid client :D
    const folder = await sdk.ok(sdk.folder(params.folder_id))
    let resObj = { folder }
    res.send(resObj)
}

//back to client side
render() {
    return (
        ...
        <h3>Dashboards</h3>
        <ul>
            {folder_contents.dashboards && folder_contents.dashboards.length ? folder_contents.dashboards.map((item, index) => {
                return <li key={item.id}>{item.title}</li>
            }) : <span>no dashboards :(</span>}
        </ul>
        <h3>Looks</h3>
        <ul>
            {folder_contents.looks && folder_contents.looks.length ? folder_contents.looks.map((item, index) => {
                return <li key={item.id}>{item.title}</li>
            }) : <span>no looks :(</span>}
        </ul>
        ...
    )
}
